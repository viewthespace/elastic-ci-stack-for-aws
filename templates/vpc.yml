
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Condition: CreateVpcResources
    Properties:
      CidrBlock: 10.0.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: $(AWS::StackName)

  Gateway:
    Type: AWS::EC2::InternetGateway
    Condition: CreateVpcResources
    Properties: {}

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: Gateway
    Condition: CreateVpcResources
    Properties:
      InternetGatewayId: $(Gateway)
      VpcId: $(Vpc)

  Subnet0:
    Type: AWS::EC2::Subnet
    Condition: CreateVpcResources
    Properties:
      AvailabilityZone: !If [
        "UseSpecifiedAvailabilityZones",
        !Select [ 0, $(AvailabilityZones) ],
        !Select [ 0, !GetAZs '$(AWS::Region)' ]
      ]
      CidrBlock: 10.0.1.0/24
      VpcId: $(Vpc)

  Subnet1:
    Type: AWS::EC2::Subnet
    Condition: CreateVpcResources
    Properties:
      AvailabilityZone: !If [
        "UseSpecifiedAvailabilityZones",
        !Select [ 1, $(AvailabilityZones) ],
        !Select [ 1, !GetAZs '$(AWS::Region)' ]
      ]
      CidrBlock: 10.0.2.0/24
      VpcId: $(Vpc)

  Routes:
    Type: AWS::EC2::RouteTable
    Condition: CreateVpcResources
    Properties:
      VpcId: $(Vpc)

  RouteDefault:
    Type: AWS::EC2::Route
    Condition: CreateVpcResources
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: $(Gateway)
      RouteTableId: $(Routes)

  Subnet0Routes:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateVpcResources
    Properties:
      SubnetId: $(Subnet0)
      RouteTableId: $(Routes)

  Subnet1Routes:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateVpcResources
    Properties:
      SubnetId: $(Subnet1)
      RouteTableId: $(Routes)
